<!doctype html>
<html manifest="site.appcache">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<title>esp32dash</title>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
</head>

<style>
.masonry {
  -moz-column-gap: 30px;
  -webkit-column-gap: 30px;
  column-gap: 30px;
  -moz-column-fill: initial;
  -webkit-column-fill: initial;
  column-fill: initial;
}
.masonry .brick {
  display: inline-block;
  width:450px;
  margin-bottom: 15px;
  margin-top: 15px;
  vertical-align: top;
}

@media only screen and (min-width: 1400px) {
  .masonry {
    -moz-column-count: 3;
    -webkit-column-count: 3;
    column-count: 3;
    width:1380px;
    margin: 0 auto; 
  }
}
@media only screen and (min-width: 1000px) and (max-width:  1399px)
 { 
  .masonry {
    -moz-column-count: 2;
    -webkit-column-count: 2;
    column-count: 2;
    width:930px;
    margin: 0 auto; 
  }
}
@media only screen and (min-width: 100px) and (max-width:  999px)
 { 
  .masonry {
    -moz-column-count: 1;
    -webkit-column-count: 1;
    column-count: 1;
    width:480px;
    margin: 0 auto; 
  }
}

.settings {display: inline-block;margin: 1em;vertical-align: top;position:relative;float:left;width:450px;}

.w3-btn-block{border:none;display:inline-block;outline:0;padding:6px 16px;vertical-align:middle;overflow:hidden;text-decoration:none!important;color:#fff;background-color:#000;text-align:center;cursor:pointer;white-space:nowrap}
.w3-btn-block.w3-disabled {pointer-events:none}
.w3-btn-block.w3-disabled:hover{box-shadow:0 8px 16px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}
.w3-btn-block{width:100%}
.w3-accordion-content{cursor:auto;display:none;position:relative;width:100%;margin:0;padding:16px}
</style>

<script type="text/javascript">

var WIFI = 0;
var MILLIS = 1;
var HALL = 3;

var MAX_CHART_VALUES = 2500;
var MAX_WIDGETS = 30;

var dashItem = [];
var dashItemsCount = 0;

var chartWiFi = null;
var dataWiFi = null;
var optionsWiFi = null;
	
var reloadPeriod = 50;
var running = false;
var fGoogleChartsLoaded = false;

var divSensorWidget = [MAX_WIDGETS];
var tickNum = [MAX_WIDGETS];
var minVal = [MAX_WIDGETS];
var maxVal = [MAX_WIDGETS];

var dataGauge = [MAX_WIDGETS];
var dataLine = [MAX_WIDGETS];

var optionsGaugeSensor = [MAX_WIDGETS];
var gaugeSensor = [MAX_WIDGETS];

var optionsLineSensor = [MAX_WIDGETS];
var lineSensor = [MAX_WIDGETS];

function SetDashItemValue(itemNum)
{
    var itemValue = 0;
    var itemName = "";
    var itemIcon = "";
    var itemType = 0;

    if (fGoogleChartsLoaded != 1)
        return;
		
    if (itemNum < dashItemsCount)
        itemValue = dashItem[itemNum].value;

    if (itemNum < dashItemsCount)
        itemName = dashItem[itemNum].name;

    if (itemNum < dashItemsCount)
        itemIcon = dashItem[itemNum].iconUnicode;

    if (itemNum < dashItemsCount)
        itemType = dashItem[itemNum].type;

    if (itemValue < minVal[itemNum])
        minVal[itemNum] = itemValue;
		
    if (itemValue > maxVal[itemNum])
	    maxVal[itemNum] = itemValue;
		
	if(divSensorWidget[itemNum] == null)
	    if (itemNum < dashItemsCount)
	        addItemWidget(itemNum, itemName, itemValue, itemType, itemIcon);
	
	document.getElementById("Value" + itemName).innerHTML = itemValue;
	
	var divGauge = document.getElementById("divGauge" + itemName);
	
	if (itemNum < dashItemsCount)
	{
	    dataGauge[itemNum].setValue(0, 1, itemValue);
	}
	
	tickNum[itemNum]++;
	
	if (tickNum[itemNum] >= MAX_CHART_VALUES - 1)
	{
	    dataLine[itemNum].removeRows(0, tickNum[itemNum]);
	    tickNum[itemNum] = 0;
	    dataLine[itemNum].addRows(MAX_CHART_VALUES);
	}
	
	dataLine[itemNum].setValue(tickNum[itemNum], 0, tickNum[itemNum]);
	dataLine[itemNum].setValue(tickNum[itemNum], 1, itemValue);

	gaugeSensor[itemNum].draw(dataGauge[itemNum], optionsGaugeSensor[itemNum]);
	
	lineSensor[itemNum].draw(dataLine[itemNum], optionsLineSensor[itemNum]);
}  

function addItemWidget(itemNum, itemName, itemValue, itemType, itemIcon)
{
	divSensorWidget[itemNum] = document.getElementById("wtSensor").cloneNode(true);
	
	divSensorWidget[itemNum].id = "divSensor" + itemName;
	
	divSensorWidget[itemNum].getElementsByTagName("h4")[0].innerHTML = itemName;
	divSensorWidget[itemNum].getElementsByTagName("h4")[0].id = "Header" + itemName;	
	 
	divSensorWidget[itemNum].getElementsByTagName("button")[0].setAttribute("onclick", "fnckShowLists('" + "View" + itemName + "')");
	divSensorWidget[itemNum].getElementsByTagName("button")[0].id = "BtnShow" + itemName;	
	
	divSensorWidget[itemNum].getElementsByTagName("div")[2].id = "View" + itemName;	
    
    //like this: <b style="font-family: FontAwesome;">&#xf0d7;</b>
	var classValue = divSensorWidget[itemNum].getElementsByTagName("span")[0].style = "font-family: FontAwesome;";
	var fontAwesomeIcon = "&#" + itemIcon + ";";
	divSensorWidget[itemNum].getElementsByTagName("span")[0].innerHTML = fontAwesomeIcon;
	divSensorWidget[itemNum].getElementsByTagName("span")[0].id = "Icon" + itemName;		

	divSensorWidget[itemNum].getElementsByTagName("span")[1].innerHTML = itemValue;
	divSensorWidget[itemNum].getElementsByTagName("span")[1].id = "Value" + itemName;	

	divSensorWidget[itemNum].getElementsByTagName("span")[2].innerHTML = itemName;
	divSensorWidget[itemNum].getElementsByTagName("span")[2].id = "Description" + itemName;	
	
	divSensorWidget[itemNum].getElementsByTagName("table")[0].style = "";	
	divSensorWidget[itemNum].getElementsByTagName("table")[0].id = "TDCarts" + itemName;	

	var divBtnLineChart = divSensorWidget[itemNum].getElementsByTagName("div")[3];
	divBtnLineChart.id = "divBtnLineChart" + itemName;	
	
	var divGauge = divSensorWidget[itemNum].getElementsByTagName("div")[4];
	divGauge.id = "divGauge" + itemName;	
	
	var divLineChart = divSensorWidget[itemNum].getElementsByTagName("div")[5];
	divLineChart.id = "divLineChart" + itemName;
			
	document.getElementById("wtSensor").parentNode.appendChild(divSensorWidget[itemNum]);
	
	minVal[itemNum] = Number(itemValue);
	maxVal[itemNum] =Number(itemValue);


	dataGauge[itemNum] = google.visualization.arrayToDataTable([
	  ['Num', 'Value'],
	  ['', maxVal[itemNum]]
	]);
	
	dataLine[itemNum] = new google.visualization.DataTable();
    dataLine[itemNum].addColumn('number', 'X');
    dataLine[itemNum].addColumn('number', 'Value');
	dataLine[itemNum].addRows(MAX_CHART_VALUES);
	
	dataLine[itemNum].setValue(0, 0, 0);
	dataLine[itemNum].setValue(0, 1, Number(itemValue));
	
	optionsGaugeSensor[itemNum] = {
	  min: maxVal[itemNum] - 0.1*maxVal[itemNum], max: maxVal[itemNum],
	  width: 120, height: 120, 
	  minorTicks: 1
	};
	
	var color = '#2196f3';
	
	if(itemNum % 2 == 0)
		color = '#2196f3'; //blue
	if(itemNum % 3 == 0)
		color = '#4CAF50'; //green
	if(itemNum % 4 == 0)
		color = '#FF5722'; //red

	if(itemNum == 0)
		color = '#4CAF50'; //green
	if(itemNum == 1)
		color = '#2196f3'; //blue
	if(itemNum == 2)
		color = '#FF5722'; //red
		
	gaugeSensor[itemNum] = new google.visualization.Gauge(divGauge);
	gaugeSensor[itemNum].draw(dataGauge[itemNum], optionsGaugeSensor[itemNum]);	
		
	optionsLineSensor[itemNum] = {
	    min: minVal[itemNum], max: maxVal[itemNum],
	    width: 240, height: 120,
	    colors: [color]
	};
		
	lineSensor[itemNum] = new google.visualization.LineChart(divLineChart);
	lineSensor[itemNum].draw(dataLine[itemNum], optionsLineSensor[itemNum]);	

	
	divSensorWidget[itemNum].style = "";	
}

function loadItemsList()
{
    var xh = new XMLHttpRequest();

    xh.onreadystatechange = function ()
    {
        if (xh.readyState == 4)
        {
            if (xh.status == 200)
            {
				var res = JSON.parse(xh.responseText);

                dashItemsCount = 0;

                for (var key in res)
                {
                    if (typeof res[key] == "undefined")
                        break;

                    if (res[key].type == WIFI) //Wi-Fi
                        document.getElementById("esp32WiFi").innerHTML = (res[key].value).toPrecision(7);
                    if (res[key].type == MILLIS) //Millis
                        document.getElementById("esp32Millis").innerHTML = (res[key].value).toPrecision(7);
                   
                    dashItem[dashItemsCount] = {};

                    dashItem[dashItemsCount].name = res[key].name;
                    dashItem[dashItemsCount].type = res[key].type;
                    dashItem[dashItemsCount].iconUnicode = res[key].iconUnicode;

                    dashItemsCount++
                }

                stateQueryFailedCounter = 0;

                run();
            }
            else
            {
                stateQueryFailedCounter++;

                if (stateQueryFailedCounter > 7)
                    document.getElementById("warning").style.display = "";

                console.log("Load dashboard items list FAILED! Trying once again...");

                setTimeout(loadItemsList, 150);
            }
        }
    };

    xh.open("GET", "/items", true);
    xh.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xh.send("");
};

function updateItemValues()
{
    if (!document.hasFocus())
    {
        setTimeout(updateItemValues, 150);
        return;
    }

    if (!running) return;

    var xh = new XMLHttpRequest();
    xh.onreadystatechange = function ()
    {
        if (xh.readyState == 4)
        {
            if (xh.status == 200)
            {

				var res = JSON.parse(xh.responseText);
                stateQueryFailedCounter = 0;

                //devices
                for (i = 0; i < dashItemsCount; i++) 
                {
                    if (typeof res[i] == "undefined")
                        break;

                    dashItem[i].value = res[i].value;

                    if (dashItem[i].type == WIFI)
                    {
                        document.getElementById("esp32WiFi").innerHTML = (dashItem[i].value).toPrecision(7);
                        if (chartWiFi != null)
                        {
                            dataWiFi.setValue(0, 1, dashItem[i].value);
                            chartWiFi.draw(dataWiFi, optionsWiFi);
                        }

                        continue;
                    }

                    if (dashItem[i].type == MILLIS)
                    {
                        document.getElementById("esp32Millis").innerHTML = (dashItem[i].value).toPrecision(7);
                        continue;
                    }

                    SetDashItemValue(i);
                }
            }
            else
            {
                stateQueryFailedCounter++;

                if (stateQueryFailedCounter > 7)
                    document.getElementById("warning").style.display = "";
            }

            console.log("Update dash items values FAILED! Trying once again...");

            setTimeout(updateItemValues, 150);
        }
    };

    xh.open("GET", "/items", true);
    xh.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xh.send("");
};
    
function ChartOnLoadCallback() 
{	
	dataWiFi = google.visualization.arrayToDataTable([
	  ['Label', 'Value'],
	  ['Wi-Fi', 100]
	]);

	optionsWiFi = {
	  min: 0, max: 100,
	  width: 120, height: 120,
	  greenFrom: 80, greenTo: 100,
	  redFrom: 0, redTo: 40,
	  yellowFrom:40, yellowTo: 80,	  
	  minorTicks: 1
	};

	chartWiFi = new google.visualization.Gauge(document.getElementById('wifi_div'));

	chartWiFi.draw(dataWiFi, optionsWiFi);
	
	document.getElementById("BuiltInSensorsCharts").style = "";
	
	fGoogleChartsLoaded = 1;
}
	  
function run()
{
	fGoogleChartsLoaded = 0;
	stateQueryFailedCounter = 0;

	for (var i = 0; i < MAX_WIDGETS; i++)
	{
	    divSensorWidget[i] = null;

		dataGauge[i] = null;
		dataLine[i] = null;

		optionsGaugeSensor[i] = null;
		gaugeSensor[i] = null;

		optionsLineSensor[i] = null;
		lineSensor[i] = null;

		minVal[i] = 0;
		maxVal[i] = 1;
		tickNum[i] = 0;
	}

	google.charts.load('current', {'packages':['corechart', 'gauge', 'line']});
    google.charts.setOnLoadCallback(ChartOnLoadCallback);
	
    if (!running)
    {
		running = true;
		updateItemValues();
	}
}

function fnckShowLists(id) {
    var x = document.getElementById(id);
    if (x.className.indexOf("w3-show") == -1) {
        x.className += " w3-show";
    } else {
        x.className = x.className.replace(" w3-show", "");
    }
}

</script>

<body onload="stateQueryFailedCounter = 0; loadItemsList();">
<div id="warning" class="w3-panel w3-pale-yellow w3-display-container" style="display:none">
    <span onclick="this.parentElement.style.display='none'"
          class="w3-button w3-pale-yellow w3-large w3-display-topright">&times;</span>
    <h3>Warning!</h3>
    <p>It seems that ESP32 didn't answer for a long. Check this first:</p>
    <p>- check if the ESP32 web-interface is open in browsers on other pc/mobiles and close or minimize such browser tabs</p>
    <p>- check the ESP32 internet connection</p>
    <p>Evereything is OK but still don't work properly? Connect to the COM Port monitor and check the ESP32 serial output.</p>
    <p>Report me issue on <a href="https://github.com/0megaIT/esp32dash/issues">esp32dash issues on github</a>. Attach as many info as you can - description, may be be screenshot and COM port output.</p>
</div>

<div class="masonry w3-margin-top w3-center">

<div class="brick w3-left-align w3-card-4">
	<header class="w3-container  w3-light-grey">
    <h4>Buit In</h4>
    </header>
	<div class="w3-container">
		<br>
		<div class="w3-accordion w3-light-grey">
			<button onclick="fnckShowLists('Built-InSensors')" 
                    class="w3-btn-block  w3-light-grey w3-left-align w3-hover-none">
                <a class="w3-text-light-blue"><b>Built In Sensors</b>&nbsp<b style="font-family: FontAwesome;">&#xf0d7;</b></a></button>
    			<div id="Built-InSensors" class="w3-accordion-content w3-container" style="height:210.28px">
				<div>
					<br>
				    <table id="BuiltInSensorsCharts" style="display:none">
				    <tr>
				    <td>				
					    <div id="wifi_div" style="width: 120px; height: 120px;"></div>
				    </td>
                    <td style="width:20px;">
                    </td>
                    <td>
                        <span class="w3-tag w3-medium w3-blue w3-tiny" style="font-family: FontAwesome;">&#61931;</span>
                        <span id="esp32WiFi" class="w3-dark-grey w3-round w3-small">000000</span>
                        <span class="w3-text-dark-grey">WiFi strength</span>
                        <br>
						<span class="w3-tag w3-medium w3-blue w3-tiny" style="transform: scale(1.13,1) translate(2px); font-family: FontAwesome;">&#61463;</span>
                        &nbsp<a id="esp32Millis" class="w3-dark-grey w3-round w3-small">000000</a>
                        <a class="w3-text-dark-grey">Millis</a>
                        <br>
                    </td>
                    </tr>
				    </table>
				</div>
			</div>
		</div>
		<br>
	</div>		
</div>

<div id="wtSensor" style="display:none" class="brick w3-left-align w3-card-4">
	<header class="w3-container w3-light-grey">
    <h4 id="wtSensorName"></h4>
    </header>
	<div class="w3-container">
		<br>
		<div class="w3-accordion w3-light-grey">
			<button id="wtSensorShowButton" 
                    onclick="fnckShowLists('PlaceHereWTSensorID')" 
                    class="w3-btn-block  w3-light-grey w3-left-align w3-hover-none">
                <a class="w3-text-light-blue"><b>Value</b>&nbsp<b style="font-family: FontAwesome;">&#xf0d7;</b></a></button>
			    <div id="wtSensorView" class="w3-accordion-content w3-container w3-show" style="height:210.28px">
				<br>
				<span id="wtSensorIcon" class="w3-tag w3-medium w3-blue w3-tiny"></span>
				<span id="wtSensorValue" class="w3-dark-grey w3-round w3-small w3-center">000000</span>
				<span id="wtSensorTypeDescription" class="w3-text-dark-grey"></span>&nbsp
				<br>
				<br>
				<div>
				<table id="wtSensorCharts" style="display:none" >
				<tr>
				<td>
					<div id="wtSensorGauge" style="width: 120px; height: 120px;"></div>
				</td>
				<td>				
					<div id="wtSensorLineChart" style="width: 240px; height: 120px;"></div>
				</td>
				</tr>
				</table>
				</div>
			    <br>					
			</div>
		</div>
		<br>		
	</div>		
</div>

</body>